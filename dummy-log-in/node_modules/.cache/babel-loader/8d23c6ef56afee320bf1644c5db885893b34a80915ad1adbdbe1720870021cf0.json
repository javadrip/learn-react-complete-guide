{"ast":null,"code":"var _jsxFileName = \"/Users/vin/code/javadrip/learn-react-complete-guide/dummy-log-in/src/App.js\";\nimport React from \"react\";\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\nimport AuthContext from \"./context/auth-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  // ================== MOVED TO auth-context.js ================== //\n\n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  // useEffect(() => {\n  //   // Check if the user is already logged in\n  //   const storedUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\n\n  //   if (storedUserLoggedInInformation === \"1\") {\n  //     setIsLoggedIn(true);\n  //   }\n  //   // Effect runs only once if the dependency array is empty\n  // }, []);\n\n  // const loginHandler = (email, password) => {\n  //   // We should of course check email and password\n  //   // But it's just a dummy/ demo anyways\n\n  //   // Store the user data in the local storage on login\n  //   localStorage.setItem(\"isLoggedIn\", \"1\");\n  //   setIsLoggedIn(true);\n  // };\n\n  // const logoutHandler = () => {\n  //   // Remove the user data from the local storage on logout\n  //   localStorage.removeItem(\"isLoggedIn\");\n  //   setIsLoggedIn(false);\n  // };\n\n  // ================== MOVED TO auth-context.js ================== //\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn: isLoggedIn,\n      onLogout: logoutHandler\n    },\n    children: [/*#__PURE__*/_jsxDEV(MainHeader, {\n      isAuthenticated: isLoggedIn,\n      onLogout: logoutHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [!isLoggedIn && /*#__PURE__*/_jsxDEV(Login, {\n        onLogin: loginHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 25\n      }, this), isLoggedIn && /*#__PURE__*/_jsxDEV(Home, {\n        onLogout: logoutHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Login","Home","MainHeader","AuthContext","jsxDEV","_jsxDEV","App","Provider","value","isLoggedIn","onLogout","logoutHandler","children","isAuthenticated","fileName","_jsxFileName","lineNumber","columnNumber","onLogin","loginHandler","_c","$RefreshReg$"],"sources":["/Users/vin/code/javadrip/learn-react-complete-guide/dummy-log-in/src/App.js"],"sourcesContent":["import React from \"react\";\n\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\nimport AuthContext from \"./context/auth-context\";\n\nfunction App() {\n  // ================== MOVED TO auth-context.js ================== //\n\n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  // useEffect(() => {\n  //   // Check if the user is already logged in\n  //   const storedUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\n\n  //   if (storedUserLoggedInInformation === \"1\") {\n  //     setIsLoggedIn(true);\n  //   }\n  //   // Effect runs only once if the dependency array is empty\n  // }, []);\n\n  // const loginHandler = (email, password) => {\n  //   // We should of course check email and password\n  //   // But it's just a dummy/ demo anyways\n\n  //   // Store the user data in the local storage on login\n  //   localStorage.setItem(\"isLoggedIn\", \"1\");\n  //   setIsLoggedIn(true);\n  // };\n\n  // const logoutHandler = () => {\n  //   // Remove the user data from the local storage on logout\n  //   localStorage.removeItem(\"isLoggedIn\");\n  //   setIsLoggedIn(false);\n  // };\n\n  // ================== MOVED TO auth-context.js ================== //\n\n  return (\n    <AuthContext.Provider\n      value={{\n        isLoggedIn: isLoggedIn,\n        onLogout: logoutHandler,\n      }}\n    >\n      <MainHeader isAuthenticated={isLoggedIn} onLogout={logoutHandler} />\n      <main>\n        {!isLoggedIn && <Login onLogin={loginHandler} />}\n        {isLoggedIn && <Home onLogout={logoutHandler} />}\n      </main>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAOC,KAAK,MAAM,0BAA0B;AAC5C,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,UAAU,MAAM,oCAAoC;AAC3D,OAAOC,WAAW,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,SAASC,GAAGA,CAAA,EAAG;EACb;;EAEA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;;EAEA,oBACED,OAAA,CAACF,WAAW,CAACI,QAAQ;IACnBC,KAAK,EAAE;MACLC,UAAU,EAAEA,UAAU;MACtBC,QAAQ,EAAEC;IACZ,CAAE;IAAAC,QAAA,gBAEFP,OAAA,CAACH,UAAU;MAACW,eAAe,EAAEJ,UAAW;MAACC,QAAQ,EAAEC;IAAc;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACpEZ,OAAA;MAAAO,QAAA,GACG,CAACH,UAAU,iBAAIJ,OAAA,CAACL,KAAK;QAACkB,OAAO,EAAEC;MAAa;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EAC/CR,UAAU,iBAAIJ,OAAA,CAACJ,IAAI;QAACS,QAAQ,EAAEC;MAAc;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5C,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE3B;AAACG,EAAA,GA9CQd,GAAG;AAgDZ,eAAeA,GAAG;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}