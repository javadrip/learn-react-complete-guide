{"ast":null,"code":"var _jsxFileName = \"/Users/vin/code/javadrip/learn-react-complete-guide/dummy-log-in/src/components/Login/Login.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useReducer, useContext } from \"react\";\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\nimport Button from \"../UI/Button/Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst emailReducer = (state, action) => {\n  if (action.type === \"USER_INPUT\") {\n    return {\n      value: action.val,\n      isValid: action.val.includes(\"@\")\n    };\n  }\n  if (action.type === \"INPUT_BLUR\") {\n    return {\n      value: state.value,\n      isValid: state.value.includes(\"@\")\n    };\n  }\n  return {\n    value: \"\",\n    isValid: false\n  };\n};\nconst passwordReducer = (state, action) => {\n  if (action.type === \"USER_INPUT\") {\n    return {\n      value: action.val,\n      isValid: action.val.trim().length > 6\n    };\n  }\n  if (action.type === \"INPUT_BLUR\") {\n    return {\n      value: state.value,\n      isValid: state.value.trim().length > 6\n    };\n  }\n  return {\n    value: \"\",\n    isValid: false\n  };\n};\nconst Login = props => {\n  _s();\n  // const [enteredEmail, setEnteredEmail] = useState(\"\");\n  // const [emailIsValid, setEmailIsValid] = useState();\n  // const [enteredPassword, setEnteredPassword] = useState(\"\");\n  // const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: \"\",\n    isValid: null\n  });\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\n    value: \"\",\n    isValid: null\n  });\n  const authCtx = useContext(AuthContext);\n\n  // Using destructuring to extract the isValid property from the emailState object\n  const {\n    isValid: emailIsValid\n  } = emailState;\n  const {\n    isValid: passwordIsValid\n  } = passwordState;\n  useEffect(() => {\n    // Debouncing using setTimeout\n    const identifier = setTimeout(() => {\n      console.log(\"Checking form validity!\");\n      setFormIsValid(emailIsValid && passwordIsValid);\n    }, 500);\n\n    // Runs before the next useEffect function execution\n    // Cleanup function: Clears the timer before the next useEffect function execution\n    return () => {\n      console.log(\"CLEANUP\");\n      clearTimeout(identifier);\n    };\n    // setFormIsValid is omitted from the dependency array because state updating functions never change by default\n    // }, [enteredEmail, enteredPassword]);\n    // If using useReducer hook\n  }, [emailIsValid, passwordIsValid]);\n  const emailChangeHandler = event => {\n    // setEnteredEmail(event.target.value);\n\n    // If using useEffect hook\n    dispatchEmail({\n      type: \"USER_INPUT\",\n      val: event.target.value\n    });\n\n    // setFormIsValid(\n    // event.target.value.includes(\"@\") && enteredPassword.trim().length > 6\n    // If using useReducer hook\n    // event.target.value.includes(\"@\") && passwordState.isValid\n    // );\n  };\n\n  const passwordChangeHandler = event => {\n    // setEnteredPassword(event.target.value);\n\n    // If using useReducer hook\n    dispatchPassword({\n      type: \"USER_INPUT\",\n      val: event.target.value\n    });\n\n    // setFormIsValid(\n    // If using useEffect hook\n    // event.target.value.trim().length > 6 && enteredEmail.includes(\"@\")\n    // If using useReducer hook\n    // event.target.value.trim().length > 6 && emailState.isValid\n    // );\n  };\n\n  const validateEmailHandler = () => {\n    // If using useEffect hook\n    // setEmailIsValid(enteredEmail.includes(\"@\"));\n    // If using useReducer hook\n    dispatchEmail({\n      type: \"INPUT_BLUR\"\n    });\n  };\n  const validatePasswordHandler = () => {\n    // setPasswordIsValid(enteredPassword.trim().length > 6);\n\n    // If using useReducer hook\n    dispatchPassword({\n      type: \"INPUT_BLUR\"\n    });\n  };\n  const submitHandler = event => {\n    event.preventDefault();\n    // props.onLogin(emailState.value, enteredPassword);\n\n    // If using useReducer hook\n    props.onLogin(emailState.value, passwordState.value);\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${\n        // emailIsValid === false ? classes.invalid : \"\"\n        // If using useReducer hook\n        emailState.isValid === false ? classes.invalid : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"E-Mail\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\"\n          // value={enteredEmail}\n          // If using useReducer hook\n          ,\n          value: emailState.value,\n          onChange: emailChangeHandler,\n          onBlur: validateEmailHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${\n        // passwordIsValid === false ? classes.invalid : \"\"\n\n        // If using useReducer hook\n        passwordState.isValid === false ? classes.invalid : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\"\n          // value={enteredPassword}\n          // If using useReducer hook\n          ,\n          value: passwordState.value,\n          onChange: passwordChangeHandler,\n          onBlur: validatePasswordHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          disabled: !formIsValid,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"HeaU0MNZnLSnvzzlHI3T3HPPJPY=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useEffect","useReducer","useContext","Card","classes","Button","jsxDEV","_jsxDEV","emailReducer","state","action","type","value","val","isValid","includes","passwordReducer","trim","length","Login","props","_s","formIsValid","setFormIsValid","emailState","dispatchEmail","passwordState","dispatchPassword","authCtx","AuthContext","emailIsValid","passwordIsValid","identifier","setTimeout","console","log","clearTimeout","emailChangeHandler","event","target","passwordChangeHandler","validateEmailHandler","validatePasswordHandler","submitHandler","preventDefault","onLogin","className","login","children","onSubmit","control","invalid","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","onChange","onBlur","actions","btn","disabled","_c","$RefreshReg$"],"sources":["/Users/vin/code/javadrip/learn-react-complete-guide/dummy-log-in/src/components/Login/Login.js"],"sourcesContent":["import React, { useState, useEffect, useReducer, useContext } from \"react\";\n\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\nimport Button from \"../UI/Button/Button\";\n\nconst emailReducer = (state, action) => {\n  if (action.type === \"USER_INPUT\") {\n    return { value: action.val, isValid: action.val.includes(\"@\") };\n  }\n  if (action.type === \"INPUT_BLUR\") {\n    return { value: state.value, isValid: state.value.includes(\"@\") };\n  }\n  return { value: \"\", isValid: false };\n};\n\nconst passwordReducer = (state, action) => {\n  if (action.type === \"USER_INPUT\") {\n    return { value: action.val, isValid: action.val.trim().length > 6 };\n  }\n  if (action.type === \"INPUT_BLUR\") {\n    return { value: state.value, isValid: state.value.trim().length > 6 };\n  }\n  return { value: \"\", isValid: false };\n};\n\nconst Login = props => {\n  // const [enteredEmail, setEnteredEmail] = useState(\"\");\n  // const [emailIsValid, setEmailIsValid] = useState();\n  // const [enteredPassword, setEnteredPassword] = useState(\"\");\n  // const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: \"\",\n    isValid: null,\n  });\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\n    value: \"\",\n    isValid: null,\n  });\n\n  const authCtx = useContext(AuthContext);\n\n  // Using destructuring to extract the isValid property from the emailState object\n  const { isValid: emailIsValid } = emailState;\n  const { isValid: passwordIsValid } = passwordState;\n\n  useEffect(() => {\n    // Debouncing using setTimeout\n    const identifier = setTimeout(() => {\n      console.log(\"Checking form validity!\");\n\n      setFormIsValid(emailIsValid && passwordIsValid);\n    }, 500);\n\n    // Runs before the next useEffect function execution\n    // Cleanup function: Clears the timer before the next useEffect function execution\n    return () => {\n      console.log(\"CLEANUP\");\n      clearTimeout(identifier);\n    };\n    // setFormIsValid is omitted from the dependency array because state updating functions never change by default\n    // }, [enteredEmail, enteredPassword]);\n    // If using useReducer hook\n  }, [emailIsValid, passwordIsValid]);\n\n  const emailChangeHandler = event => {\n    // setEnteredEmail(event.target.value);\n\n    // If using useEffect hook\n    dispatchEmail({ type: \"USER_INPUT\", val: event.target.value });\n\n    // setFormIsValid(\n    // event.target.value.includes(\"@\") && enteredPassword.trim().length > 6\n    // If using useReducer hook\n    // event.target.value.includes(\"@\") && passwordState.isValid\n    // );\n  };\n\n  const passwordChangeHandler = event => {\n    // setEnteredPassword(event.target.value);\n\n    // If using useReducer hook\n    dispatchPassword({ type: \"USER_INPUT\", val: event.target.value });\n\n    // setFormIsValid(\n    // If using useEffect hook\n    // event.target.value.trim().length > 6 && enteredEmail.includes(\"@\")\n    // If using useReducer hook\n    // event.target.value.trim().length > 6 && emailState.isValid\n    // );\n  };\n\n  const validateEmailHandler = () => {\n    // If using useEffect hook\n    // setEmailIsValid(enteredEmail.includes(\"@\"));\n    // If using useReducer hook\n    dispatchEmail({ type: \"INPUT_BLUR\" });\n  };\n\n  const validatePasswordHandler = () => {\n    // setPasswordIsValid(enteredPassword.trim().length > 6);\n\n    // If using useReducer hook\n    dispatchPassword({ type: \"INPUT_BLUR\" });\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    // props.onLogin(emailState.value, enteredPassword);\n\n    // If using useReducer hook\n    props.onLogin(emailState.value, passwordState.value);\n  };\n\n  return (\n    <Card className={classes.login}>\n      <form onSubmit={submitHandler}>\n        <div\n          className={`${classes.control} ${\n            // emailIsValid === false ? classes.invalid : \"\"\n            // If using useReducer hook\n            emailState.isValid === false ? classes.invalid : \"\"\n          }`}\n        >\n          <label htmlFor=\"email\">E-Mail</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            // value={enteredEmail}\n            // If using useReducer hook\n            value={emailState.value}\n            onChange={emailChangeHandler}\n            onBlur={validateEmailHandler}\n          />\n        </div>\n        <div\n          className={`${classes.control} ${\n            // passwordIsValid === false ? classes.invalid : \"\"\n\n            // If using useReducer hook\n            passwordState.isValid === false ? classes.invalid : \"\"\n          }`}\n        >\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            // value={enteredPassword}\n            // If using useReducer hook\n            value={passwordState.value}\n            onChange={passwordChangeHandler}\n            onBlur={validatePasswordHandler}\n          />\n        </div>\n        <div className={classes.actions}>\n          <Button type=\"submit\" className={classes.btn} disabled={!formIsValid}>\n            Login\n          </Button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default Login;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}