{"ast":null,"code":"var _jsxFileName = \"/Users/vin/code/javadrip/learn-react-complete-guide/dummy-log-in/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useContext } from \"react\";\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\nimport AuthContext from \"./context/auth-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // ================== MOVED TO auth-context.js ================== //\n\n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  // useEffect(() => {\n  //   // Check if the user is already logged in\n  //   const storedUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\n\n  //   if (storedUserLoggedInInformation === \"1\") {\n  //     setIsLoggedIn(true);\n  //   }\n  //   // Effect runs only once if the dependency array is empty\n  // }, []);\n\n  // const loginHandler = (email, password) => {\n  //   // We should of course check email and password\n  //   // But it's just a dummy/ demo anyways\n\n  //   // Store the user data in the local storage on login\n  //   localStorage.setItem(\"isLoggedIn\", \"1\");\n  //   setIsLoggedIn(true);\n  // };\n\n  // const logoutHandler = () => {\n  //   // Remove the user data from the local storage on logout\n  //   localStorage.removeItem(\"isLoggedIn\");\n  //   setIsLoggedIn(false);\n  // };\n\n  // ================== MOVED TO auth-context.js ================== //\n  const ctx = useContext(AuthContext);\n  return (\n    /*#__PURE__*/\n    // ================== MOVED TO index.js ================== //\n    // <AuthContext.Provider\n    //   value={{\n    //     isLoggedIn: isLoggedIn,\n    //     onLogout: logoutHandler,\n    //   }}\n    // >\n    // ================== MOVED TO index.js ================== //\n    _jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(MainHeader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        children: [!ctx.isLoggedIn && /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 29\n        }, this), ctx.isLoggedIn && /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }, this)\n    // ================== MOVED TO index.js ================== //\n    // </AuthContext.Provider>\n    // ================== MOVED TO index.js ================== //\n  );\n}\n_s(App, \"/dMy7t63NXD4eYACoT93CePwGrg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useContext","Login","Home","MainHeader","AuthContext","jsxDEV","_jsxDEV","App","_s","ctx","Fragment","children","fileName","_jsxFileName","lineNumber","columnNumber","isLoggedIn","_c","$RefreshReg$"],"sources":["/Users/vin/code/javadrip/learn-react-complete-guide/dummy-log-in/src/App.js"],"sourcesContent":["import React, { useContext } from \"react\";\n\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\nimport AuthContext from \"./context/auth-context\";\n\nfunction App() {\n  // ================== MOVED TO auth-context.js ================== //\n\n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  // useEffect(() => {\n  //   // Check if the user is already logged in\n  //   const storedUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\n\n  //   if (storedUserLoggedInInformation === \"1\") {\n  //     setIsLoggedIn(true);\n  //   }\n  //   // Effect runs only once if the dependency array is empty\n  // }, []);\n\n  // const loginHandler = (email, password) => {\n  //   // We should of course check email and password\n  //   // But it's just a dummy/ demo anyways\n\n  //   // Store the user data in the local storage on login\n  //   localStorage.setItem(\"isLoggedIn\", \"1\");\n  //   setIsLoggedIn(true);\n  // };\n\n  // const logoutHandler = () => {\n  //   // Remove the user data from the local storage on logout\n  //   localStorage.removeItem(\"isLoggedIn\");\n  //   setIsLoggedIn(false);\n  // };\n\n  // ================== MOVED TO auth-context.js ================== //\n  const ctx = useContext(AuthContext);\n\n  return (\n    // ================== MOVED TO index.js ================== //\n    // <AuthContext.Provider\n    //   value={{\n    //     isLoggedIn: isLoggedIn,\n    //     onLogout: logoutHandler,\n    //   }}\n    // >\n    // ================== MOVED TO index.js ================== //\n    <React.Fragment>\n      <MainHeader />\n      <main>\n        {!ctx.isLoggedIn && <Login />}\n        {ctx.isLoggedIn && <Home />}\n      </main>\n    </React.Fragment>\n    // ================== MOVED TO index.js ================== //\n    // </AuthContext.Provider>\n    // ================== MOVED TO index.js ================== //\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AAEzC,OAAOC,KAAK,MAAM,0BAA0B;AAC5C,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,UAAU,MAAM,oCAAoC;AAC3D,OAAOC,WAAW,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;;EAEA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA,MAAMC,GAAG,GAAGT,UAAU,CAACI,WAAW,CAAC;EAEnC;IAAA;IACE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAE,OAAA,CAACP,KAAK,CAACW,QAAQ;MAAAC,QAAA,gBACbL,OAAA,CAACH,UAAU;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACdT,OAAA;QAAAK,QAAA,GACG,CAACF,GAAG,CAACO,UAAU,iBAAIV,OAAA,CAACL,KAAK;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,EAC5BN,GAAG,CAACO,UAAU,iBAAIV,OAAA,CAACJ,IAAI;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACO;IAChB;IACA;IACA;EAAA;AAEJ;AAACP,EAAA,CArDQD,GAAG;AAAAU,EAAA,GAAHV,GAAG;AAuDZ,eAAeA,GAAG;AAAC,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}