{"ast":null,"code":"var _jsxFileName = \"/Users/vin/code/javadrip/react-complete-guide/01-starting-setup/src/components/Expenses/ExpenseItem.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport ExpenseDate from \"./ExpenseDate\";\nimport Card from \"../UI/Card\";\nimport \"./ExpenseItem.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpenseItem = props => {\n  _s();\n  // Hooks (such as useState) must be called at the top level of the component, not inside loops, conditions, or nested functions.\n  // useState returns an array with two elements:\n  //    the current state value (the variable itself) and\n  //    a function (aka the updating function) that allows you to update the state.\n  // Here, we are using array destructuring to extract the two elements of the array returned by useState.\n  // The initial value is passed to useState as an argument.\n  const [title, setTitle] = useState(props.title);\n  const clickHandler = () => {\n    // When this state updating function setTitle is called, the component function will be executed again.\n    setTitle(\"Updated!\");\n    // The console.log below still shows the old title because the state update is scheduled,\n    // so the new value is not yet available until the next time the component function is executed.\n    console.log(title);\n  };\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: \"expense-item\",\n      children: [/*#__PURE__*/_jsxDEV(ExpenseDate, {\n        date: props.date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"expense-item__description\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"expense-item__price\",\n          children: [\"$\", props.amount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clickHandler,\n        children: \"Change title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(ExpenseItem, \"ceUz0wjPP/oTY3+evv2xH5hljW4=\");\n_c = ExpenseItem;\nexport default ExpenseItem;\nvar _c;\n$RefreshReg$(_c, \"ExpenseItem\");","map":{"version":3,"names":["useState","ExpenseDate","Card","jsxDEV","_jsxDEV","ExpenseItem","props","_s","title","setTitle","clickHandler","console","log","children","className","date","fileName","_jsxFileName","lineNumber","columnNumber","amount","onClick","_c","$RefreshReg$"],"sources":["/Users/vin/code/javadrip/react-complete-guide/01-starting-setup/src/components/Expenses/ExpenseItem.js"],"sourcesContent":["import { useState } from \"react\";\nimport ExpenseDate from \"./ExpenseDate\";\nimport Card from \"../UI/Card\";\nimport \"./ExpenseItem.css\";\n\nconst ExpenseItem = props => {\n  // Hooks (such as useState) must be called at the top level of the component, not inside loops, conditions, or nested functions.\n  // useState returns an array with two elements:\n  //    the current state value (the variable itself) and\n  //    a function (aka the updating function) that allows you to update the state.\n  // Here, we are using array destructuring to extract the two elements of the array returned by useState.\n  // The initial value is passed to useState as an argument.\n  const [title, setTitle] = useState(props.title);\n\n  const clickHandler = () => {\n    // When this state updating function setTitle is called, the component function will be executed again.\n    setTitle(\"Updated!\");\n    // The console.log below still shows the old title because the state update is scheduled,\n    // so the new value is not yet available until the next time the component function is executed.\n    console.log(title);\n  };\n\n  return (\n    <li>\n      {/* The content between the Card tags is passed to the Card component as props.children. */}\n      <Card className=\"expense-item\">\n        <ExpenseDate date={props.date} />\n        <div className=\"expense-item__description\">\n          <h2>{title}</h2>\n          <div className=\"expense-item__price\">${props.amount}</div>\n        </div>\n        <button onClick={clickHandler}>Change title</button>\n      </Card>\n    </li>\n  );\n};\n\nexport default ExpenseItem;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,IAAI,MAAM,YAAY;AAC7B,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,WAAW,GAAGC,KAAK,IAAI;EAAAC,EAAA;EAC3B;EACA;EACA;EACA;EACA;EACA;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAACM,KAAK,CAACE,KAAK,CAAC;EAE/C,MAAME,YAAY,GAAGA,CAAA,KAAM;IACzB;IACAD,QAAQ,CAAC,UAAU,CAAC;IACpB;IACA;IACAE,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;EACpB,CAAC;EAED,oBACEJ,OAAA;IAAAS,QAAA,eAEET,OAAA,CAACF,IAAI;MAACY,SAAS,EAAC,cAAc;MAAAD,QAAA,gBAC5BT,OAAA,CAACH,WAAW;QAACc,IAAI,EAAET,KAAK,CAACS;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,eACjCf,OAAA;QAAKU,SAAS,EAAC,2BAA2B;QAAAD,QAAA,gBACxCT,OAAA;UAAAS,QAAA,EAAKL;QAAK;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAM,eAChBf,OAAA;UAAKU,SAAS,EAAC,qBAAqB;UAAAD,QAAA,GAAC,GAAC,EAACP,KAAK,CAACc,MAAM;QAAA;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAO;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACtD,eACNf,OAAA;QAAQiB,OAAO,EAAEX,YAAa;QAAAG,QAAA,EAAC;MAAY;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAC/C;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACJ;AAET,CAAC;AAACZ,EAAA,CA9BIF,WAAW;AAAAiB,EAAA,GAAXjB,WAAW;AAgCjB,eAAeA,WAAW;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}