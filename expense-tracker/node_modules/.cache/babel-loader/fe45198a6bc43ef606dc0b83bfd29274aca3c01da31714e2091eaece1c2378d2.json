{"ast":null,"code":"var _jsxFileName = \"/Users/vin/code/javadrip/react-complete-guide/01-starting-setup/src/components/NewExpense/ExpenseForm.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport \"./ExpenseForm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpenseForm = () => {\n  _s();\n  // Multiple states\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\n  const [enteredDate, setEnteredDate] = useState(\"\");\n\n  // Single state\n  // const [userInput, setUserInput] = useState({\n  //   enteredTitle: \"\",\n  //   enteredAmount: \"\",\n  //   enteredDate: \"\",\n  // });\n\n  // Multiple states\n  // Whenever an event listener is triggered, an event object is passed to the event handler function\n  const titleChangeHandler = event => {\n    setEnteredTitle(event.target.value);\n  };\n  const amountChangeHandler = event => {\n    setEnteredAmount(event.target.value);\n  };\n  const dateChangeHandler = event => {\n    setEnteredDate(event.target.value);\n  };\n\n  // Single state, but not ideal and not a good practice, especially when there are edge cases\n  // const titleChangeHandler = event => {\n  //   setUserInput({\n  //     ...userInput, // Spread operator to copy the existing state\n  //     enteredTitle: event.target.value, // Overwrite the enteredTitle property\n  //   });\n  // };\n\n  // const amountChangeHandler = event => {\n  //   setUserInput({\n  //     ...userInput, // Spread operator to copy the existing state\n  //     enteredAmount: event.target.value, // Overwrite the enteredAmount property\n  //   });\n  // };\n\n  // const dateChangeHandler = event => {\n  //   setUserInput({\n  //     ...userInput, // Spread operator to copy the existing state\n  //     enteredDate: event.target.value, // Overwrite the enteredDate property\n  //   });\n  // };\n\n  // Single state: This is recommended when the new state depends on the previous state\n  // const titleChangeHandler = event => {\n  //   setUserInput(prevState => {\n  //     return { ...prevState, enteredTitle: event.target.value };\n  //   });\n  // };\n\n  // const amountChangeHandler = event => {\n  //   setUserInput(prevState => {\n  //     return { ...prevState, enteredAmount: event.target.value };\n  //   });\n  // };\n\n  // const dateChangeHandler = event => {\n  //   setUserInput(prevState => {\n  //     return { ...prevState, enteredDate: event.target.value };\n  //   });\n  // };\n\n  const submitHandler = event => {\n    event.preventDefault(); // Prevents the default behavior of the form, which is to send a request and reload the page\n\n    // Create an object to store the data\n    // This is required because the data is stored in multiple states instead of a single state\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate)\n    };\n\n    // console.log(expenseData);\n    // console.log(enteredTitle, enteredAmount, enteredDate);\n\n    // Clear the form after submission\n    setEnteredTitle(\"\");\n    setEnteredAmount(\"\");\n    setEnteredDate(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\"\n          // value={enteredTitle} makes\n          ,\n          value: enteredTitle,\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.01\",\n          step: \"0.01\",\n          value: enteredAmount,\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2019-01-01\",\n          max: \"2023-12-31\",\n          value: enteredDate,\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s(ExpenseForm, \"cQceuCgozgRBnFcek1NBqBcFFts=\");\n_c = ExpenseForm;\nexport default ExpenseForm;\nvar _c;\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","ExpenseForm","_s","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","titleChangeHandler","event","target","value","amountChangeHandler","dateChangeHandler","submitHandler","preventDefault","expenseData","title","amount","date","Date","onSubmit","children","className","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","min","step","max","_c","$RefreshReg$"],"sources":["/Users/vin/code/javadrip/react-complete-guide/01-starting-setup/src/components/NewExpense/ExpenseForm.js"],"sourcesContent":["import { useState } from \"react\";\n\nimport \"./ExpenseForm.css\";\n\nconst ExpenseForm = () => {\n  // Multiple states\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\n  const [enteredDate, setEnteredDate] = useState(\"\");\n\n  // Single state\n  // const [userInput, setUserInput] = useState({\n  //   enteredTitle: \"\",\n  //   enteredAmount: \"\",\n  //   enteredDate: \"\",\n  // });\n\n  // Multiple states\n  // Whenever an event listener is triggered, an event object is passed to the event handler function\n  const titleChangeHandler = event => {\n    setEnteredTitle(event.target.value);\n  };\n\n  const amountChangeHandler = event => {\n    setEnteredAmount(event.target.value);\n  };\n\n  const dateChangeHandler = event => {\n    setEnteredDate(event.target.value);\n  };\n\n  // Single state, but not ideal and not a good practice, especially when there are edge cases\n  // const titleChangeHandler = event => {\n  //   setUserInput({\n  //     ...userInput, // Spread operator to copy the existing state\n  //     enteredTitle: event.target.value, // Overwrite the enteredTitle property\n  //   });\n  // };\n\n  // const amountChangeHandler = event => {\n  //   setUserInput({\n  //     ...userInput, // Spread operator to copy the existing state\n  //     enteredAmount: event.target.value, // Overwrite the enteredAmount property\n  //   });\n  // };\n\n  // const dateChangeHandler = event => {\n  //   setUserInput({\n  //     ...userInput, // Spread operator to copy the existing state\n  //     enteredDate: event.target.value, // Overwrite the enteredDate property\n  //   });\n  // };\n\n  // Single state: This is recommended when the new state depends on the previous state\n  // const titleChangeHandler = event => {\n  //   setUserInput(prevState => {\n  //     return { ...prevState, enteredTitle: event.target.value };\n  //   });\n  // };\n\n  // const amountChangeHandler = event => {\n  //   setUserInput(prevState => {\n  //     return { ...prevState, enteredAmount: event.target.value };\n  //   });\n  // };\n\n  // const dateChangeHandler = event => {\n  //   setUserInput(prevState => {\n  //     return { ...prevState, enteredDate: event.target.value };\n  //   });\n  // };\n\n  const submitHandler = event => {\n    event.preventDefault(); // Prevents the default behavior of the form, which is to send a request and reload the page\n\n    // Create an object to store the data\n    // This is required because the data is stored in multiple states instead of a single state\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate),\n    };\n\n    // console.log(expenseData);\n    // console.log(enteredTitle, enteredAmount, enteredDate);\n\n    // Clear the form after submission\n    setEnteredTitle(\"\");\n    setEnteredAmount(\"\");\n    setEnteredDate(\"\");\n  };\n\n  return (\n    <form onSubmit={submitHandler}>\n      <div className=\"new-expense__controls\">\n        <div className=\"new-expense__control\">\n          <label>Title</label>\n          <input\n            type=\"text\"\n            // value={enteredTitle} makes\n            value={enteredTitle}\n            onChange={titleChangeHandler}\n          />\n        </div>\n        <div className=\"new-expense__control\">\n          <label>Amount</label>\n          <input\n            type=\"number\"\n            min=\"0.01\"\n            step=\"0.01\"\n            value={enteredAmount}\n            onChange={amountChangeHandler}\n          />\n        </div>\n        <div className=\"new-expense__control\">\n          <label>Date</label>\n          <input\n            type=\"date\"\n            min=\"2019-01-01\"\n            max=\"2023-12-31\"\n            value={enteredDate}\n            onChange={dateChangeHandler}\n          />\n        </div>\n      </div>\n      <div className=\"new-expense__actions\">\n        <button type=\"submit\">Add Expense</button>\n      </div>\n    </form>\n  );\n};\n\nexport default ExpenseForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}