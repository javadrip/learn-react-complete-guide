{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n// import { createStore } from \"redux\";\n\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\n\n// Using redux toolkit\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    // createSlice automatically generates the reducer logic and corresponding action creators\n    // The actions can be accessed by counterActions.increment, counterActions.decrement, counterActions.increase, and counterActions.toggle\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload; // payload is a special name designated by redux toolkit, and we cannot use other names\n    },\n\n    toggle(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\n\n// Using original redux\n// const counterReducer = (state = initialState, action) => {\n//   if (action.type === \"increment\") {\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.amount,\n//       showCounter: state.showCounter,\n//     };\n//   }\n\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n\n//   if (action.type === \"toggle\") {\n//     return {\n//       showCounter: !state.showCounter,\n//       counter: state.counter,\n//     };\n//   }\n\n//   return state;\n// };\n\n// Using original redux\n// const store = createStore(counterReducer);\n\nexport const counterActions = counterSlice.actions;\nexport default counterSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","counter","showCounter","counterSlice","name","reducers","increment","state","decrement","increase","action","payload","toggle","counterActions","actions","reducer"],"sources":["/Users/vin/code/javadrip/learn-react-complete-guide/redux-counter/src/store/counterSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n// import { createStore } from \"redux\";\n\nconst initialState = { counter: 0, showCounter: true };\n\n// Using redux toolkit\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    // createSlice automatically generates the reducer logic and corresponding action creators\n    // The actions can be accessed by counterActions.increment, counterActions.decrement, counterActions.increase, and counterActions.toggle\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload; // payload is a special name designated by redux toolkit, and we cannot use other names\n    },\n    toggle(state) {\n      state.showCounter = !state.showCounter;\n    },\n  },\n});\n\n// Using original redux\n// const counterReducer = (state = initialState, action) => {\n//   if (action.type === \"increment\") {\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.amount,\n//       showCounter: state.showCounter,\n//     };\n//   }\n\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n\n//   if (action.type === \"toggle\") {\n//     return {\n//       showCounter: !state.showCounter,\n//       counter: state.counter,\n//     };\n//   }\n\n//   return state;\n// };\n\n// Using original redux\n// const store = createStore(counterReducer);\n\nexport const counterActions = counterSlice.actions;\nexport default counterSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C;;AAEA,MAAMC,YAAY,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;;AAEtD;AACA,MAAMC,YAAY,GAAGJ,WAAW,CAAC;EAC/BK,IAAI,EAAE,SAAS;EACfJ,YAAY;EACZK,QAAQ,EAAE;IACR;IACA;IACAC,SAASA,CAACC,KAAK,EAAE;MACfA,KAAK,CAACN,OAAO,EAAE;IACjB,CAAC;IACDO,SAASA,CAACD,KAAK,EAAE;MACfA,KAAK,CAACN,OAAO,EAAE;IACjB,CAAC;IACDQ,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAE;MACtBH,KAAK,CAACN,OAAO,GAAGM,KAAK,CAACN,OAAO,GAAGS,MAAM,CAACC,OAAO,CAAC,CAAC;IAClD,CAAC;;IACDC,MAAMA,CAACL,KAAK,EAAE;MACZA,KAAK,CAACL,WAAW,GAAG,CAACK,KAAK,CAACL,WAAW;IACxC;EACF;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,OAAO,MAAMW,cAAc,GAAGV,YAAY,CAACW,OAAO;AAClD,eAAeX,YAAY,CAACY,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}