{"ast":null,"code":"var _jsxFileName = \"/Users/vin/code/javadrip/react-complete-guide/01-starting-setup/src/components/NewExpense/ExpenseForm.js\",\n  _s = $RefreshSig$();\nimport \"./ExpenseForm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpenseForm = () => {\n  _s();\n  // Multiple states\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\n  const [enteredDate, setEnteredDate] = useState(\"\");\n\n  // Single state\n  // const [userInput, setUserInput] = useState({\n  //   enteredTitle: \"\",\n  //   enteredAmount: \"\",\n  //   enteredDate: \"\",\n  // });\n\n  // Multiple states\n  // Whenever an event listener is triggered, an event object is passed to the event handler function\n  // const titleChangeHandler = event => {\n  //   setEnteredTitle(event.target.value);\n  // };\n\n  // const amountChangeHandler = event => {\n  //   setEnteredAmount(event.target.value);\n  // };\n\n  // const dateChangeHandler = event => {\n  //   setEnteredDate(event.target.value);\n  // };\n\n  // Single state, but not ideal and not a good practice, especially when there are edge cases\n  // const titleChangeHandler = event => {\n  //   setUserInput({\n  //     ...userInput, // Spread operator to copy the existing state\n  //     enteredTitle: event.target.value, // Overwrite the enteredTitle property\n  //   });\n  // };\n\n  // const amountChangeHandler = event => {\n  //   setUserInput({\n  //     ...userInput, // Spread operator to copy the existing state\n  //     enteredAmount: event.target.value, // Overwrite the enteredAmount property\n  //   });\n  // };\n\n  // const dateChangeHandler = event => {\n  //   setUserInput({\n  //     ...userInput, // Spread operator to copy the existing state\n  //     enteredDate: event.target.value, // Overwrite the enteredDate property\n  //   });\n  // };\n\n  // Single state: This is recommended when the new state depends on the previous state\n  // const titleChangeHandler = event => {\n  //   setUserInput(prevState => {\n  //     return { ...prevState, enteredTitle: event.target.value };\n  //   });\n  // };\n\n  // const amountChangeHandler = event => {\n  //   setUserInput(prevState => {\n  //     return { ...prevState, enteredAmount: event.target.value };\n  //   });\n  // };\n\n  // const dateChangeHandler = event => {\n  //   setUserInput(prevState => {\n  //     return { ...prevState, enteredDate: event.target.value };\n  //   });\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.01\",\n          step: \"0.01\",\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2019-01-01\",\n          max: \"2023-12-31\",\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(ExpenseForm, \"cQceuCgozgRBnFcek1NBqBcFFts=\");\n_c = ExpenseForm;\nexport default ExpenseForm;\nvar _c;\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["jsxDEV","_jsxDEV","ExpenseForm","_s","enteredTitle","setEnteredTitle","useState","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","children","className","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","titleChangeHandler","min","step","amountChangeHandler","max","dateChangeHandler","_c","$RefreshReg$"],"sources":["/Users/vin/code/javadrip/react-complete-guide/01-starting-setup/src/components/NewExpense/ExpenseForm.js"],"sourcesContent":["import \"./ExpenseForm.css\";\n\nconst ExpenseForm = () => {\n  // Multiple states\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\n  const [enteredDate, setEnteredDate] = useState(\"\");\n\n  // Single state\n  // const [userInput, setUserInput] = useState({\n  //   enteredTitle: \"\",\n  //   enteredAmount: \"\",\n  //   enteredDate: \"\",\n  // });\n\n  // Multiple states\n  // Whenever an event listener is triggered, an event object is passed to the event handler function\n  // const titleChangeHandler = event => {\n  //   setEnteredTitle(event.target.value);\n  // };\n\n  // const amountChangeHandler = event => {\n  //   setEnteredAmount(event.target.value);\n  // };\n\n  // const dateChangeHandler = event => {\n  //   setEnteredDate(event.target.value);\n  // };\n\n  // Single state, but not ideal and not a good practice, especially when there are edge cases\n  // const titleChangeHandler = event => {\n  //   setUserInput({\n  //     ...userInput, // Spread operator to copy the existing state\n  //     enteredTitle: event.target.value, // Overwrite the enteredTitle property\n  //   });\n  // };\n\n  // const amountChangeHandler = event => {\n  //   setUserInput({\n  //     ...userInput, // Spread operator to copy the existing state\n  //     enteredAmount: event.target.value, // Overwrite the enteredAmount property\n  //   });\n  // };\n\n  // const dateChangeHandler = event => {\n  //   setUserInput({\n  //     ...userInput, // Spread operator to copy the existing state\n  //     enteredDate: event.target.value, // Overwrite the enteredDate property\n  //   });\n  // };\n\n  // Single state: This is recommended when the new state depends on the previous state\n  // const titleChangeHandler = event => {\n  //   setUserInput(prevState => {\n  //     return { ...prevState, enteredTitle: event.target.value };\n  //   });\n  // };\n\n  // const amountChangeHandler = event => {\n  //   setUserInput(prevState => {\n  //     return { ...prevState, enteredAmount: event.target.value };\n  //   });\n  // };\n\n  // const dateChangeHandler = event => {\n  //   setUserInput(prevState => {\n  //     return { ...prevState, enteredDate: event.target.value };\n  //   });\n  // };\n\n  return (\n    <form>\n      <div className=\"new-expense__controls\">\n        <div className=\"new-expense__control\">\n          <label>Title</label>\n          <input type=\"text\" onChange={titleChangeHandler} />\n        </div>\n        <div className=\"new-expense__control\">\n          <label>Amount</label>\n          <input\n            type=\"number\"\n            min=\"0.01\"\n            step=\"0.01\"\n            onChange={amountChangeHandler}\n          />\n        </div>\n        <div className=\"new-expense__control\">\n          <label>Date</label>\n          <input\n            type=\"date\"\n            min=\"2019-01-01\"\n            max=\"2023-12-31\"\n            onChange={dateChangeHandler}\n          />\n        </div>\n      </div>\n      <div className=\"new-expense__actions\">\n        <button type=\"submit\">Add Expense</button>\n      </div>\n    </form>\n  );\n};\n\nexport default ExpenseForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}